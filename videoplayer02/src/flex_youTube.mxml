<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:youtube="de.derhess.video.youtube.*" 
	layout="vertical" 
	 >
	<mx:Script>
		<![CDATA[
			import flash.utils.getDefinitionByName;
			import de.derhess.video.youtube.YouTubeError;
			import de.derhess.video.youtube.YouTubePlayingState;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import de.derhess.video.youtube.YouTubeVideoQuality;
			import de.derhess.video.youtube.YouTubeEvent;
			
			[Bindable]
			private var trackingActions:ArrayCollection = new ArrayCollection(new Array());
			
			//----------------------------------
			//  YouTube Event Handling
			//----------------------------------
			private function handlePlayerLoaded(event:YouTubeEvent):void
	        {
	        	trackingActions.addItem({label:"YouTube Playinger API loaded"});
	        	youTubePlayer.cueVideoById("L3Ez9PHXJic",0,YouTubeVideoQuality.DEFAULT);
	        }
	        
	        private function handlePlayingState(event:YouTubeEvent):void
	        {
	        	var message:String = "";
	        	switch(event.playerState)
				{
				    case YouTubePlayingState.BUFFERING:
				        message = "Video is Buffering";
				        break;
				    case YouTubePlayingState.UNSTARTED:
				        message = "Player is unstarted";
				        break;
				    case YouTubePlayingState.PLAYING:
				        message = "Video is playing";
						
				        break;
				    case YouTubePlayingState.PAUSE:
				        message = "Video pause is active";
				        break;
				    case YouTubePlayingState.VIDEO_CUED:
				        message = "Video is cued - Playing new Video?!"
				        break;
				    case YouTubePlayingState.VIDEO_ENDED:
				        message = "Video is finished";
				        break;
				 
				    default:
				        message = "uh what happens?? " + event.playerState;
				        break;
				}

	        	trackingActions.addItem({label:"YouTube PlayingState: " + message});
	        }
	        
	        private function handleVideoQuality(event:YouTubeEvent):void
	        {
	        	var message:String = "";
	        	switch(event.playbackQuality)
				{
				    case YouTubeVideoQuality.DEFAULT:
				        message = "default - YouTube choose";
				        break;
				    case YouTubeVideoQuality.SMALL:
				        message = "SMALL - less than 640px by 360px";
				        break;
				    case YouTubeVideoQuality.MEDIUM:
				        message = "MEDIUM - 640px by 360px";
				        break;
				    case YouTubeVideoQuality.LARGE:
				        message = "LARGE - 854px by 480px";
				        break;
				    case YouTubeVideoQuality.HD720:
				        message = "HD - 1280px by 720px"
				        break;
				 
				    default:
				        message = "uh what happens?? " + event.playbackQuality;
				        break;
				}
	        	trackingActions.addItem({label:"Video Quality changed: " + message});
	        }
	        
	        
	        
	        private function handleYouTubeError(event:YouTubeEvent):void
	        {
	        	var message:String = "";
	        	switch(event.errorCode)
				{
				    case YouTubeError.VIDEO_NOT_FOUND:
				        message = "Video not found: " + event.errorCode;
				        break;
				    case YouTubeError.VIDEO_NOT_ALLOWED:
				        message = "Video not allowed: " + event.errorCode;
				        break;
				    case YouTubeError.EMBEDDING_NOT_ALLOWED:
				        message = "Embedding not allowed: " + event.errorCode;
				        break;
				 
				    default:
				        message = "undefined Error:" + event.errorCode;
				        break;
				}
				Alert.show(message,"YouTube Error",Alert.OK);
	        	trackingActions.addItem({label:"Video Error: " + message});
	        }
	        
	        //----------------------------------
			//  YouTube Player Control
			//----------------------------------
			private function handlePlay(event:MouseEvent):void
			{
				youTubePlayer.playVideo();
				this.addEventListener(Event.ENTER_FRAME,handlePlayingTime);
			}
			
			private function handlePause(event:MouseEvent):void
			{
				youTubePlayer.pauseVideo();
				this.removeEventListener(Event.ENTER_FRAME,handlePlayingTime);
			}
			
			private function handleStop(event:MouseEvent):void
			{
				youTubePlayer.stopVideo();
				this.removeEventListener(Event.ENTER_FRAME,handlePlayingTime);
				
			}
			
			private function handleComboQuality(event:Event):void
			{
				youTubePlayer.playbackQuality =  String(ComboBox(event.target).selectedItem);
			}
			
			private function handlePlayingTime(e:Event):void
			{
				labelTime.text = youTubePlayer.getCurrentTime() + " / " + youTubePlayer.getDuration();
				
				progresPlayingVideo.minimum = 0;
				progresPlayingVideo.maximum = youTubePlayer.getDuration();
				progresPlayingVideo.setProgress(youTubePlayer.getCurrentTime(),youTubePlayer.getDuration());
				
				progressLoadVideo.minimum = 0;
				progressLoadVideo.maximum = youTubePlayer.getVideoBytesTotal();
				progressLoadVideo.setProgress(youTubePlayer.getVideoBytesLoaded(),youTubePlayer.getVideoBytesTotal());
			}
			
		]]>
	</mx:Script>
	<mx:VBox>
		<youtube:FlexYouTube id="youTubePlayer" 
			x="0" y="0" 
			width="{Number(inputWidth.text)}" height="{Number(inputHeight.text)}"
			volume="{sliderVolume.value}"
			youtubePlayerLoaded="{handlePlayerLoaded(event);}"
			youtubeStatus="{handlePlayingState(event);}"
			youtubeVideoQuality="{handleVideoQuality(event);}"
			youtubeError="{handleYouTubeError(event);}" />
	</mx:VBox>
	
	<mx:VBox>
		<mx:VBox id="conPlayControls">
			<mx:HBox>
				<mx:Button label="Stop" click="{handleStop(event);}"/>
				<mx:Button label="Play" click="{handlePlay(event);}" />
				<mx:Button label="Pause" click="{handlePause(event);}" />
				<mx:Label id="labelTime"  width="150"/>
			</mx:HBox>
				
			<mx:HBox>
				<mx:ProgressBar id="progresPlayingVideo" label="playbar" mode="manual" labelPlacement="center" />
					<mx:ProgressBar id="progressLoadVideo" label="loading bar" mode="manual" labelPlacement="center" />
					<mx:HSlider id="sliderVolume" minimum="0" maximum="100" value="100" liveDragging="true" />
			</mx:HBox>	
			<mx:HBox>
				<mx:Button label="destroy" click="{youTubePlayer.destroy();}" />
				<mx:Button label="show Embed Code" click="{Alert.show(youTubePlayer.getVideoEmbedCode(),'YouTube Embed Code',Alert.OK);}" />
				<mx:Button label="show Video URL" click="{Alert.show(youTubePlayer.getVideoUrl(),'YouTube Video URL',Alert.OK);}" />
			</mx:HBox>
		</mx:VBox>
		
		<mx:Form>
			<mx:FormItem label="Video ClipID">
				<mx:TextInput id="inputClipID" text="L3Ez9PHXJic" />
				<mx:Button label="changeVideo" click="{youTubePlayer.cueVideoById(inputClipID.text,0,YouTubeVideoQuality.DEFAULT);}" />
			</mx:FormItem>
			
			<mx:FormItem label="Video Seek to">
				<mx:TextInput id="inputSeek" width="60" />
				<mx:Button label="jumpTo" click="{youTubePlayer.seekTo(Number(inputSeek.text));}" />
			</mx:FormItem>
			
			<mx:FormItem label="Video Size">
				<mx:TextInput id="inputWidth" text="320" />
				<mx:TextInput id="inputHeight" text="240" />
			</mx:FormItem>
			
			<mx:FormItem label="Video QUALITY">
				<mx:ComboBox id="comboVideoQuality" 
					dataProvider="{YouTubeVideoQuality.ALL}" 
					close="handleComboQuality(event)" />
			</mx:FormItem>
			
		</mx:Form>
		
		
		<mx:List id="listAction" dataProvider="{trackingActions}" width="600" height="100" />
	</mx:VBox>
</mx:Application>

