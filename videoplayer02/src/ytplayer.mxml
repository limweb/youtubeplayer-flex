<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:youtube="de.derhess.video.youtube.*"
		 width="640" height="359" xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init()"
		 >
	<s:states>
		<s:State name="State1"/>
		<s:State name="FULL"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import de.derhess.video.youtube.YouTubeError;
			import de.derhess.video.youtube.YouTubeEvent;
			import de.derhess.video.youtube.YouTubePlayingState;
			import de.derhess.video.youtube.YouTubeVideoQuality;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			import org.osflash.thunderbolt.Logger;

			[Bindable] public var totalTime:Number = 350;
			[Bindable] public var defaultTime:Number = 10;
			[Bindable] public var volNum:Number = 30;
			[Bindable] public var loadbarwidth:Number = 0;
			[Bindable] public var loadbar:Number = 0;
			[Bindable] private var vdostop:Boolean = false;

			
			private function handlePlayerLoaded(event:YouTubeEvent):void
			{
				Logger.info("YouTube Playinger API loaded");
				youTubePlayer.cueVideoById("L3Ez9PHXJic",0,YouTubeVideoQuality.DEFAULT);
			}
			

			private function handlePlayingState(event:YouTubeEvent):void
			{
				var message:String = "";
				switch(event.playerState)
				{
					case YouTubePlayingState.BUFFERING:
						message = "Video is Buffering";
						break;
					case YouTubePlayingState.UNSTARTED:
						message = "Player is unstarted";
						break;
					case YouTubePlayingState.PLAYING:
						message = "Video is playing";
//						youTubePlayer.playVideo();
						btnPlayStop.selected = true;
						this.addEventListener(Event.ENTER_FRAME,handlePlayingTime);
						break;
					case YouTubePlayingState.PAUSE:
						message = "Video pause is active";
						btnPlayStop.selected = false;
						break;
					case YouTubePlayingState.VIDEO_CUED:
						message = "Video is cued - Playing new Video?!"
						youTubePlayer.visible = true;
						break;
					case YouTubePlayingState.VIDEO_ENDED:
						message = "Video is finished";
						youTubePlayer.visible = false;
						break;
					
					default:
						message = "uh what happens?? " + event.playerState;
						break;
				}
				
				Logger.info("YouTube PlayingState: " + message);
			}
			
			private function handleVideoQuality(event:YouTubeEvent):void
			{
				var message:String = "";
				switch(event.playbackQuality)
				{
					case YouTubeVideoQuality.DEFAULT:
						message = "default - YouTube choose";
						break;
					case YouTubeVideoQuality.SMALL:
						message = "SMALL - less than 640px by 360px";
						break;
					case YouTubeVideoQuality.MEDIUM:
						message = "MEDIUM - 640px by 360px";
						break;
					case YouTubeVideoQuality.LARGE:
						message = "LARGE - 854px by 480px";
						break;
					case YouTubeVideoQuality.HD720:
						message = "HD - 1280px by 720px"
						break;
					
					default:
						message = "uh what happens?? " + event.playbackQuality;
						break;
				}
				Logger.info("Video Quality changed: " + message);
			}
			
			private function handleYouTubeError(event:YouTubeEvent):void
			{
				var message:String = "";
				switch(event.errorCode)
				{
					case YouTubeError.VIDEO_NOT_FOUND:
						message = "Video not found: " + event.errorCode;
						break;
					case YouTubeError.VIDEO_NOT_ALLOWED:
						message = "Video not allowed: " + event.errorCode;
						break;
					case YouTubeError.EMBEDDING_NOT_ALLOWED:
						message = "Embedding not allowed: " + event.errorCode;
						break;
					
					default:
						message = "undefined Error:" + event.errorCode;
						break;
				}
				Alert.show(message,"YouTube Error",Alert.OK);
				Logger.info("Video Error: " + message);
			}
			
			
			protected function playStop(event:MouseEvent):void
			{
				youTubePlayer.visible = true;
				if(btnPlayStop.selected){
					youTubePlayer.playVideo();
					this.addEventListener(Event.ENTER_FRAME,handlePlayingTime);
				} else {
					youTubePlayer.pauseVideo();
					this.removeEventListener(Event.ENTER_FRAME,handlePlayingTime);
				}
			}
			
			private function handlePlayingTime(e:Event):void
			{
				txtTotalTime.text = youTubePlayer.getCurrentTime() + " / " + youTubePlayer.getDuration();
				vdoCtrl.maximum = youTubePlayer.getDuration();
				if(!vdostop){ vdoCtrl.value = youTubePlayer.getCurrentTime(); }
				loadbar = youTubePlayer.getVideoBytesLoaded()/youTubePlayer.getVideoBytesTotal()*100 * 313/100;
				txtloader0.text = String(youTubePlayer.getVideoBytesLoaded()/youTubePlayer.getVideoBytesTotal()*100 * vdoCtrl.maximum /100);
				txtloader1.text = String( youTubePlayer.getVideoBytesLoaded());
				txtloader2.text = String(youTubePlayer.getVideoBytesTotal());
			}
			

			protected function youTubePlayer_clickHandler(event:MouseEvent):void
			{
				if(youTubePlayer.playerState == YouTubePlayingState.PLAYING){
					youTubePlayer.pauseVideo()();
				} else {
					youTubePlayer.playVideo();
				}
				
			}
			
			protected function vdoCtrl_changeHandler(event:Event):void
			{
				vdostop = true;
				youTubePlayer.seekTo(vdoCtrl.value);
				vdostop = false;
				
			}
			
			protected function youTubePlayer_mouseMoveHandler(event:MouseEvent):void
			{
				ctrlGroup.visible = true;
				FlexGlobals.topLevelApplication.timeerStar();
				
			}
			
		]]>
	</fx:Script>
	<s:BitmapImage horizontalCenter="0" verticalCenter="0" smooth="true" id="imgScreen"
				   source="@Embed('/assets/images/2948525373_c9a207e0c1.png')"/>
	<s:BitmapImage width="266" height="63" smooth="true" source="@Embed('/assets/images/logo2.png')"
				   x="{imgScreen.x+5}" y="{imgScreen.y+5}">
		<s:filters>
			<s:DropShadowFilter alpha="0.5" angle="45.0" blurX="4.0" blurY="4.0" color="#000000"
								distance="4.0" hideObject="false" inner="false" knockout="false"
								quality="2" strength="1"/>
		</s:filters>
	</s:BitmapImage>
	
	<youtube:FlexYouTube x="0" y="0" width="641" height="359" visible="false" id="youTubePlayer"
						 youtubePlayerLoaded="{handlePlayerLoaded(event);}"
						 youtubeStatus="{handlePlayingState(event);}"
						 youtubeVideoQuality="{handleVideoQuality(event);}"
						 youtubeError="{handleYouTubeError(event);}"
						 volume="{volctrl.value}"
						 click="youTubePlayer_clickHandler(event)"
						 mouseMove="youTubePlayer_mouseMoveHandler(event)"
						 />
	<s:Group bottom="10" horizontalCenter="0" id="ctrlGroup">
		<s:BitmapImage source="@Embed('/assets/images/videoplayer02/shape.png')" smooth="true" x="0" y="0" alpha="0.6"/>
		<mx:Text id="txtTotalTime" x="357" y="10" color="#ffffff" fontFamily="Arial" fontSize="11"
				 text="0.00"/>
		<s:HSlider id="vdoCtrl" x="44" y="8" width="313" maximum="{totalTime}" minimum="0"
				   showDataTip="true" skinClass="components.vdoColtrolBar" toolTip="{vdoCtrl.value}"
				   change="vdoCtrl_changeHandler(event)"/>
		<s:Button x="543.95" y="9" buttonMode="true" click="FlexGlobals.topLevelApplication.toggleFullScreen()"
				  skinClass="components.btnFull"/>
		<s:BitmapImage source="@Embed('/assets/images/videoplayer02/Shape 11.png')" smooth="true"  x="433" y="9"/>
		<s:BitmapImage source="@Embed('/assets/images/videoplayer02/Shape 14_s Drop Shadow.png')" smooth="true"  x="462" y="14"/>
		<s:HSlider id="volctrl" x="461.95" y="10" skinClass="components.volControl" maximum="100" minimum="0" value="{volNum}"
				    showDataTip="true" toolTip="{volctrl.value}" />
		<s:ToggleButton x="7.95" y="3" buttonMode="true" 
						click="playStop(event)" id="btnPlayStop"
						skinClass="components.btnPlayPause"/>
	</s:Group>
	
	<mx:Text x="528" y="10"  id="txtloader1" visible="false"/>
	<mx:Text x="528" y="53"  id="txtloader0" visible="false"/>
	<mx:Text x="588" y="10"  id="txtloader2" visible="false"/>

</s:Group>
